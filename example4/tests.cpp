#include "fibonacci.h"
#include <catch.hpp>

SCENARIO( "Test the template fibonacci sequence" )
{
	unsigned long long result;
	result=Fibonacci<0>::value;  CHECK( result==0u );
	result=Fibonacci<1>::value;  CHECK( result==1u );
	result=Fibonacci<2>::value;  CHECK( result==1u );
	result=Fibonacci<3>::value;  CHECK( result==2u );
	result=Fibonacci<4>::value;  CHECK( result==3u );
	result=Fibonacci<5>::value;  CHECK( result==5u );
	result=Fibonacci<6>::value;  CHECK( result==8u );
	result=Fibonacci<7>::value;  CHECK( result==13u );
	result=Fibonacci<8>::value;  CHECK( result==21u );
	result=Fibonacci<9>::value;  CHECK( result==34u );
	result=Fibonacci<10>::value; CHECK( result==55u );
	result=Fibonacci<11>::value; CHECK( result==89u );
	result=Fibonacci<12>::value; CHECK( result==144u );
	result=Fibonacci<13>::value; CHECK( result==233u );
	result=Fibonacci<14>::value; CHECK( result==377u );
	result=Fibonacci<15>::value; CHECK( result==610u );
	result=Fibonacci<16>::value; CHECK( result==987u );
	result=Fibonacci<17>::value; CHECK( result==1597u );
	result=Fibonacci<18>::value; CHECK( result==2584u );
	result=Fibonacci<19>::value; CHECK( result==4181u );
	result=Fibonacci<20>::value; CHECK( result==6765u );
	result=Fibonacci<21>::value; CHECK( result==10946u );
	result=Fibonacci<22>::value; CHECK( result==17711u );
	result=Fibonacci<23>::value; CHECK( result==28657u );
	result=Fibonacci<24>::value; CHECK( result==46368u );
	result=Fibonacci<25>::value; CHECK( result==75025u );
	result=Fibonacci<26>::value; CHECK( result==121393u );
	result=Fibonacci<27>::value; CHECK( result==196418u );
	result=Fibonacci<28>::value; CHECK( result==317811u );
	result=Fibonacci<29>::value; CHECK( result==514229u );
	result=Fibonacci<30>::value; CHECK( result==832040u );
	result=Fibonacci<31>::value; CHECK( result==1346269u );
	result=Fibonacci<32>::value; CHECK( result==2178309u );
	result=Fibonacci<33>::value; CHECK( result==3524578u );
	result=Fibonacci<34>::value; CHECK( result==5702887u );
	result=Fibonacci<35>::value; CHECK( result==9227465u );
	result=Fibonacci<36>::value; CHECK( result==14930352u );
	result=Fibonacci<37>::value; CHECK( result==24157817u );
	result=Fibonacci<38>::value; CHECK( result==39088169u );
	result=Fibonacci<39>::value; CHECK( result==63245986u );
	result=Fibonacci<40>::value; CHECK( result==102334155u );
	result=Fibonacci<41>::value; CHECK( result==165580141u );
	result=Fibonacci<42>::value; CHECK( result==267914296u );
	result=Fibonacci<43>::value; CHECK( result==433494437u );
	result=Fibonacci<44>::value; CHECK( result==701408733u );
	result=Fibonacci<45>::value; CHECK( result==1134903170u );
	result=Fibonacci<46>::value; CHECK( result==1836311903u );
	result=Fibonacci<47>::value; CHECK( result==2971215073u );
	/* Only works as far as here for normal unsigned (overflows) */
	result=Fibonacci<48>::value; CHECK( result==4807526976u );
	result=Fibonacci<49>::value; CHECK( result==7778742049u );
	result=Fibonacci<50>::value; CHECK( result==12586269025u );
	result=Fibonacci<51>::value; CHECK( result==20365011074u );
	result=Fibonacci<52>::value; CHECK( result==32951280099u );
	result=Fibonacci<53>::value; CHECK( result==53316291173u );
	result=Fibonacci<54>::value; CHECK( result==86267571272u );
	result=Fibonacci<55>::value; CHECK( result==139583862445u );
	result=Fibonacci<56>::value; CHECK( result==225851433717u );
	result=Fibonacci<57>::value; CHECK( result==365435296162u );
	result=Fibonacci<58>::value; CHECK( result==591286729879u );
	result=Fibonacci<59>::value; CHECK( result==956722026041u );
	result=Fibonacci<60>::value; CHECK( result==1548008755920u );
	result=Fibonacci<61>::value; CHECK( result==2504730781961u );
	result=Fibonacci<62>::value; CHECK( result==4052739537881u );
	result=Fibonacci<63>::value; CHECK( result==6557470319842u );
	result=Fibonacci<64>::value; CHECK( result==10610209857723u );
	result=Fibonacci<65>::value; CHECK( result==17167680177565u );
	result=Fibonacci<66>::value; CHECK( result==27777890035288u );
	result=Fibonacci<67>::value; CHECK( result==44945570212853u );
	result=Fibonacci<68>::value; CHECK( result==72723460248141u );
	result=Fibonacci<69>::value; CHECK( result==117669030460994u );
	result=Fibonacci<70>::value; CHECK( result==190392490709135u );
	result=Fibonacci<71>::value; CHECK( result==308061521170129u );
	result=Fibonacci<72>::value; CHECK( result==498454011879264u );
	result=Fibonacci<73>::value; CHECK( result==806515533049393u );
	result=Fibonacci<74>::value; CHECK( result==1304969544928657u );
	result=Fibonacci<75>::value; CHECK( result==2111485077978050u );
	result=Fibonacci<76>::value; CHECK( result==3416454622906707u );
	result=Fibonacci<77>::value; CHECK( result==5527939700884757u );
	result=Fibonacci<78>::value; CHECK( result==8944394323791464u );
	result=Fibonacci<79>::value; CHECK( result==14472334024676221u );
	result=Fibonacci<80>::value; CHECK( result==23416728348467685u );
	result=Fibonacci<81>::value; CHECK( result==37889062373143906u );
	result=Fibonacci<82>::value; CHECK( result==61305790721611591u );
	result=Fibonacci<83>::value; CHECK( result==99194853094755497u );
	result=Fibonacci<84>::value; CHECK( result==160500643816367088u );
	result=Fibonacci<85>::value; CHECK( result==259695496911122585u );
	result=Fibonacci<86>::value; CHECK( result==420196140727489673u );
	result=Fibonacci<87>::value; CHECK( result==679891637638612258u );
	result=Fibonacci<88>::value; CHECK( result==1100087778366101931u );
	result=Fibonacci<89>::value; CHECK( result==1779979416004714189u );
	result=Fibonacci<90>::value; CHECK( result==2880067194370816120u );
	result=Fibonacci<91>::value; CHECK( result==4660046610375530309u );
	result=Fibonacci<92>::value; CHECK( result==7540113804746346429u );
	result=Fibonacci<93>::value; CHECK( result==12200160415121876738u );
	/* After this, 64 bit unsigned integers will overflow */
}
